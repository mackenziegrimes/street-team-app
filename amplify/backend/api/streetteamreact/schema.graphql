type Artist
  @model
  @aws_iam
  @aws_cognito_user_pools
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update, delete] }
      { allow: public, provider: iam, operations: [read] }
      { allow: groups, groups: ["everyone"], operations: [read] }
    ]
  ) {
  id: ID!
  name: String!
  contests: [Contest] @connection(keyName: "byArtist", fields: ["id"])
  actionPages: [ActionPage] @connection(keyName: "byArtist",fields:["id"])
  "route is used to route to specific pages"
  route: String
}

type Enduser
  @model
  @aws_iam
  @aws_cognito_user_pools
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update, delete] }
      { allow: public, provider: iam, operations: [read] }
      { allow: groups, groups: ["everyone"], operations: [read] }
    ]
  ) {
  id: ID!
  username: String
  firstName: String
  lastName: String
  actionPageSubscriptions: [ActionPageSubscriptions]
    @connection(keyName: "byEnduser", fields: ["id"])
  contestActions: [EnduserContestActions]
    @connection(keyName: "byEnduser", fields: ["id"])
  contestSubscriptions: [ContestSubscription]
    @connection(keyName: "byEnduser", fields: ["id"])
}

type ArtistUser
  @model
  @aws_iam
  @aws_cognito_user_pools
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update, delete] }
      { allow: public, provider: iam, operations: [read] }
      { allow: groups, groups: ["everyone"], operations: [read] }
    ]
  )
  @key(name: "byArtist", fields: ["artistID", "id"])
  {
  """
  Artist User manages an Artist Type giving them permissions to access and edit that artists records
  Right now artist users and artists are one-to-one, in the future probably want a single artist user to be able to manage multiple artists
  """
  id: ID!
  username: String
  firstName: String
  lastName: String
  artistID: ID
  artist: Artist @connection(fields: ["artistID"])
  actionPages: [ActionPage] @connection(keyName: "byCreatorUser", fields: ["id"])
}

type Picture
  @model
  @aws_iam
  @aws_cognito_user_pools
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update, delete] }
      { allow: public, provider: iam, operations: [read] }
      { allow: groups, groups: ["everyone"], operations: [read] }
    ]
  ) {
  id: ID!
  publicUrl: String
  name: String
  owner: String
  visibility: Visibility
  createdAt: String
  file: S3Object
}

type S3Object {
  bucket: String!
  region: String!
  key: String!
}

enum Visibility {
  public
  private
}

"ActionPage Data Types"
type ActionPage
  @model
  @key(name: "byArtist", fields: ["artistID", "heading"])
  @key(name: "byCreatorUser", fields: ["creatorUserID"])
  @aws_iam
  @aws_cognito_user_pools
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update, delete] }
      { allow: public, provider: iam, operations: [read] }
      { allow: groups, groups: ["everyone"], operations: [read] }
    ]
  ) {
  id: ID!
  artistID: ID
  artist: Artist @connection(fields: ["artistID"])
  creatorUserID: ID
  creatorUser: ArtistUser @connection(fields: ["creatorUserID"])
  actionButtons: [ActionPageButton]
    @connection(keyName: "byActionPage", fields: ["id"])
  pictureID: ID
  picture: Picture @connection(fields: ["pictureID"])
  subscribers: [ActionPageSubscriptions]
    @connection(keyName: "byActionPage", fields: ["id"])
  """
  Configurable Details
  """
  pageTitle: String
  heading: String
  subheading: String
  pageRoute: String
}

type ActionPageSubscriptions
  @model
  @aws_iam
  @aws_cognito_user_pools
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update, delete] }
      { allow: public, provider: iam, operations: [read] }
      { allow: groups, groups: ["everyone"], operations: [read] }
    ]
  )
  @key(name: "byActionPage", fields: ["actionPageID", "enduserID"])
  @key(name: "byEnduser", fields: ["enduserID", "actionPageID"])
  @key(
    name: "byReferralEnduser"
    fields: ["referralEnduserID", "actionPageID"]
  ) {
  """
  Connects the ActionPage to the users participating in that page
  note: completedActionButtonIDs maybe should just be a connection to ActionButtons, but for simplicity right now we're just storing the IDs on this record, not a connection to the entire object
  """
  id: ID!
  actionPageID: ID!
  enduserID: ID!
  referralEnduserID: ID
  enduserPoints: Int
  actionPage: ActionPage! @connection(fields: ["actionPageID"])
  enduser: Enduser! @connection(fields: ["enduserID"])
  referralEnduser: Enduser @connection(fields: ["referralEnduserID"])
  completedActionButtonIDs: [ID]
}

type ActionPageButton
  @model
  @key(name: "byActionPage", fields: ["actionPageID"])
  @aws_iam
  @aws_cognito_user_pools
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update, delete] }
      { allow: public, provider: iam, operations: [read] }
      { allow: groups, groups: ["everyone"], operations: [read] }
    ]
  ) {
  id: ID!
  actionPageID: ID!
  actionpage: ActionPage @connection(fields: ["actionPageID"])
  """
  Configurable Details
  """
  preActionText: String
  postActionText: String
  buttonIcon: String
  backgroundColor: String
  textColor: String
  pointValue: Int
  position: Int
  targetURL: String
  """
  serviceAction should eventually be its own graphql type when we start building that feature. this is a placeholder json object
  """
  serviceAction: AWSJSON
}

"Contest Data Types"
type Contest
  @model
  @key(name: "byArtist", fields: ["artistID", "headline"])
  @aws_iam
  @aws_cognito_user_pools
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update, delete] }
      { allow: public, provider: iam, operations: [read] }
      { allow: groups, groups: ["everyone"], operations: [read] }
    ]
  ) {
  id: ID!
  headline: String!
  description: String
  encouragementHeadline: String
  encouragementDescription: String
  landingButtonText: String!
  deadline: String
  artistID: ID!
  artist: Artist @connection(fields: ["artistID"])
  actions: [ContestAction] @connection(keyName: "byContest", fields: ["id"])
  pictureID: ID!
  picture: Picture @connection(fields: ["pictureID"])
  testPictureUrl: String
  subscribers: [ContestSubscription]
    @connection(keyName: "byContest", fields: ["id"])
  streetTeamUrl: String
  spotifyPlayUrl: String
  spotifyFollowPlaylistUrl: String
  spotifyFollowArtistUrl: String
  spotifySaveUrl: String
}

type ContestAction
  @model
  @key(name: "byContest", fields: ["contestID", "url"])
  @aws_iam
  @aws_cognito_user_pools
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update, delete] }
      { allow: public, provider: iam, operations: [read] }
      { allow: groups, groups: ["everyone"], operations: [read] }
    ]
  ) {
  id: ID!
  preActionText: String
  postActionText: String
  pointValue: Int
  contestID: ID!
  contest: Contest @connection(fields: ["contestID"])
  enduserActions: [EnduserContestActions]
    @connection(keyName: "byAction", fields: ["id"])
  actionType: ActionType
  url: String!
}

type ActionType
  @model
  @aws_iam
  @aws_cognito_user_pools
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update, delete] }
      { allow: public, provider: iam, operations: [read] }
      { allow: groups, groups: ["everyone"], operations: [read] }
    ]
  ) {
  id: ID!
  value: String
}

type ContestSubscription
  @model
  @aws_iam
  @aws_cognito_user_pools
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update, delete] }
      { allow: public, provider: iam, operations: [read] }
      { allow: groups, groups: ["everyone"], operations: [read] }
    ]
  )
  @key(name: "byContest", fields: ["contestID", "enduserID"])
  @key(name: "byEnduser", fields: ["enduserID", "contestID"])
  @key(name: "byReferralEnduser", fields: ["referralEnduserID", "contestID"]) {
  id: ID!
  contestID: ID!
  enduserID: ID!
  referralEnduserID: ID
  enduserPoints: Int
  """
  These Booleans will eventually be stored on the EnduserContestActions type instead
  For the MVP we're storing them here
  """
  completeStreetTeamJoin: Boolean
  completeSpotifyFollow: Boolean
  completeSpotifySave: Boolean
  completeSpotifyPlay: Boolean
  contest: Contest! @connection(fields: ["contestID"])
  enduser: Enduser! @connection(fields: ["enduserID"])
  referralEnduser: Enduser @connection(fields: ["referralEnduserID"])
}

type EnduserContestActions
  @model
  @aws_iam
  @aws_cognito_user_pools
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update, delete] }
      { allow: public, provider: iam, operations: [read] }
      { allow: groups, groups: ["everyone"], operations: [read] }
    ]
  )
  @key(name: "byAction", fields: ["actionID"])
  @key(name: "byEnduser", fields: ["enduserID"]) {
  enduserID: ID!
  enduser: Enduser!
  actionID: ID!
  action: ContestAction!
  status: String
  createdAt: String
}